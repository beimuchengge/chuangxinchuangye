#include <immintrin.h>
#include <stdio.h>
#include <time.h>

unsigned int xunhuanzuoyi(unsigned int a, int i)
{
	return ((a << i) | (a >> (32 - i)));
}
unsigned int P0(unsigned int a)
{
	return a ^ xunhuanzuoyi(a, 9) ^ xunhuanzuoyi(a, 17);
}
unsigned int P1(unsigned int a)
{
	return a ^ xunhuanzuoyi(a,15) ^ xunhuanzuoyi(a, 23);
}
unsigned int FF(int i, unsigned int A, unsigned int B, unsigned int C)
{
	if (i <= 15)
		return A ^ B ^ C;
	else
		return (A & B) | (B & C) | (C & A);
}
unsigned int GG(int i, unsigned int A, unsigned int B, unsigned int C)
{
	if (i <= 15)
		return A ^ B ^ C;
	else
		return (A & B) | (C & ~A);
}
void tianchong(char* message, unsigned int** plaintext, int len)
{
	int num = (len + 72) >> 6;
	int llen = len >> 2;
	for (int i = 0; i < llen; i++)
	{
		int ii = i << 2;
		plaintext[i >> 4][i & 15] = (int(message[ii]) << 24) | (int(message[ii + 1]) << 16) | (int(message[ii + 2]) << 8) | int(message[ii + 3]);
	}
	plaintext[llen >> 4][llen & 15] = 0;
	for (int i = llen << 2; i < len; i++)
	{
		plaintext[llen >> 4][llen & 15] = (plaintext[llen >> 4][llen & 15] << 8) | int(message[i]);
	}
	plaintext[llen >> 4][llen & 15] = ((plaintext[llen >> 4][llen & 15] << 1) | 1) << (((8 - ((len - (llen << 2)) << 1)) << 2) - 1);
	for (int i = llen + 1; i < (num << 4); i++)
	{
		plaintext[i >> 4][i & 15] = 0;
	}
	plaintext[num - 1][15] = 24;
}
void simdCF(int j, unsigned int* BB, unsigned int** V)
{
	unsigned int W[68];
	unsigned int WW[64];
	for (int i = 0; i < 16; i++)
	{
		W[i] = BB[i];
	}
	unsigned int temp[4];
	for (int i = 16; i < 67; i+=3)
	{
		__m128i a, b, c;
		temp[0] = (W[i - 3] << 15) | (W[i - 3] >> 17);
		temp[1] = (W[i - 2] << 15) | (W[i - 2] >> 17);
		temp[2] = (W[i - 1] << 15) | (W[i - 1] >> 17);
		temp[3] = 0;
		a = _mm_loadu_epi32(temp);
		b = _mm_loadu_epi32(W + i - 16);
		a = _mm_xor_si128(a, b);
		c = _mm_loadu_epi32(W + i - 9);
		a = _mm_xor_si128(a, c);
		_mm_storeu_epi32(temp, a);
		temp[0] = (temp[0] << 15) | (temp[0] >> 17);
		temp[1] = (temp[1] << 15) | (temp[1] >> 17);
		temp[2] = (temp[2] << 15) | (temp[2] >> 17);
		b = _mm_loadu_epi32(temp);
		a = _mm_xor_si128(a, b);
		temp[0] = (temp[0] << 8) | (temp[0] >> 24);
		temp[1] = (temp[1] << 8) | (temp[1] >> 24);
		temp[2] = (temp[2] << 8) | (temp[2] >> 24);
		c = _mm_loadu_epi32(temp);
		a = _mm_xor_si128(a, c);
		temp[0] = (W[i - 13] << 7) | (W[i - 13] >> 25);
		temp[1] = (W[i - 12] << 7) | (W[i - 12] >> 25);
		temp[2] = (W[i - 11] << 7) | (W[i - 11] >> 25);
		b = _mm_loadu_epi32(temp);
		a = _mm_xor_si128(a, b);
		c = _mm_loadu_epi32(W + i - 6);
		a = _mm_xor_si128(a, c);
		_mm_storeu_epi32(W + i, a);
	}
	unsigned int e = W[51] ^ W[58] ^ ((W[64] << 15) | (W[64] >> 17));
	e = e ^ ((e << 15) | (e >> 17)) ^ ((e << 23) | (e >> 9));
	W[67] = e ^ W[61] ^ ((W[54] << 7) | (W[54] >> 25));
	for (int i = 0; i < 64; i += 4)
	{
		__m128i a, b, c;
		a = _mm_loadu_epi32(&W[i]);
		b = _mm_loadu_epi32(&W[i + 4]);
		c = _mm_xor_si128(a, b);
		_mm_storeu_epi32(&WW[i], c);
	}
	unsigned int T[64];
	for (int i = 0; i < 16; i++)
	{
		T[i] = 0x79cc4519;
	}
	for (int i = 16; i < 64; i++)
	{
		T[i] = 0x7a879d8a;
	}
	unsigned int A, B, C, D, E, F, G, H, SS1, TT1, SS2, TT2;
	A = V[j][0];
	B = V[j][1];
	C = V[j][2];
	D = V[j][3];
	E = V[j][4];
	F = V[j][5];
	G = V[j][6];
	H = V[j][7];
	for (int i = 0; i < 64; i++)
	{
		unsigned int ss = ((A << 12) | (A >> 20)) + E + ((T[i] << (i & 31)) | (T[i] >> (32 - (i & 31))));
		SS1 = (ss << 7) | (ss >> 25);
		SS2 = SS1 ^ ((A << 12) | A >> 20);
		TT1 = (FF(i, A, B, C) + D + SS2 + WW[i]);
		TT2 = (GG(i, E, F, G) + H + SS1 + W[i]);
		D = C;
		C = (B << 9) | (B >> 23);
		B = A;
		A = TT1;
		H = G;
		G = (F << 19) | (F >> 13);
		F = E;
		E = TT2 ^ ((TT2 << 9) | (TT2 >> 23)) ^ ((TT2 << 17) | (TT2 >> 15));
	}
	V[j + 1][0] = A ^ V[j][0];
	V[j + 1][1] = B ^ V[j][1];
	V[j + 1][2] = C ^ V[j][2];
	V[j + 1][3] = D ^ V[j][3];
	V[j + 1][4] = E ^ V[j][4];
	V[j + 1][5] = F ^ V[j][5];
	V[j + 1][6] = G ^ V[j][6];
	V[j + 1][7] = H ^ V[j][7];	
}void CF(int j, unsigned int* BB, unsigned int** V)
{
	unsigned int W[68];
	unsigned int WW[64];
	for (int i = 0; i < 16; i++)
	{
		W[i] = BB[i];
	}
	unsigned int temp[4];
	for (int i = 16; i < 68; i++)
	{
		W[i] = P1(W[i - 16] ^ W[i - 9] ^ xunhuanzuoyi(W[i - 3], 15)) ^ xunhuanzuoyi(W[i - 13], 7) ^ W[i - 6];
	}
	for (int i = 0; i < 64; i++)
	{
		WW[i] = W[i] ^ W[i + 4];
	}
	unsigned int T[64];
	for (int i = 0; i < 16; i++)
	{
		T[i] = 0x79cc4519;
	}
	for (int i = 16; i < 64; i++)
	{
		T[i] = 0x7a879d8a;
	}
	unsigned int A, B, C, D, E, F, G, H, SS1, TT1, SS2, TT2;
	A = V[j][0];
	B = V[j][1];
	C = V[j][2];
	D = V[j][3];
	E = V[j][4];
	F = V[j][5];
	G = V[j][6];
	H = V[j][7];
	for (int i = 0; i < 64; i++)
	{
		unsigned int ss = ((A << 12) | (A >> 20)) + E + ((T[i] << (i & 31)) | (T[i] >> (32 - (i & 31))));
		SS1 = (ss << 7) | (ss >> 25);
		SS2 = SS1 ^ ((A << 12) | A >> 20);
		TT1 = (FF(i, A, B, C) + D + SS2 + WW[i]);
		TT2 = (GG(i, E, F, G) + H + SS1 + W[i]);
		D = C;
		C = (B << 9) | (B >> 23);
		B = A;
		A = TT1;
		H = G;
		G = (F << 19) | (F >> 13);
		F = E;
		E = TT2 ^ ((TT2 << 9) | (TT2 >> 23)) ^ ((TT2 << 17) | (TT2 >> 15));
	}
	V[j + 1][0] = A ^ V[j][0];
	V[j + 1][1] = B ^ V[j][1];
	V[j + 1][2] = C ^ V[j][2];
	V[j + 1][3] = D ^ V[j][3];
	V[j + 1][4] = E ^ V[j][4];
	V[j + 1][5] = F ^ V[j][5];
	V[j + 1][6] = G ^ V[j][6];
	V[j + 1][7] = H ^ V[j][7];
}
void simddiedaiyasuo(unsigned int** plaintext, int len, unsigned int** V)
{
	int num = (len + 72) >> 6;
	for (int i = 0; i < num; i++)
	{
		simdCF(i, plaintext[i], V);
	}
}
void diedaiyasuo(unsigned int** plaintext, int len, unsigned int** V)
{
	int num = (len + 72) >> 6;
	for (int i = 0; i < num; i++)
	{
		CF(i, plaintext[i], V);
	}
}
void simdsm3(char* message, unsigned int** plaintext, int len, unsigned int** V)
{
	int n = (len + 72) >> 6;
	tianchong(message, plaintext, len);
	simddiedaiyasuo(plaintext, len, V);
	
}void sm3(char* message, unsigned int** plaintext, int len, unsigned int** V)
{
	int n = (len + 72) >> 6;
	tianchong(message, plaintext, len);
	simddiedaiyasuo(plaintext, len, V);
}
int main()
{
	char message[] = "abajsiLGHwouhaiopHiohodhgouqwhgfoujbFPhJFLHFolueabg;anb;ikhfglabgk;abgljahbgaljgnba;eknfadsl;ghbael;dgbak;egbnaek;gc";
	int len = sizeof(message) - 1;
	int num = (len + 72) >> 6;
	unsigned int** plaintext = new unsigned int* [num];
	for (int i = 0; i < num; i++)
	{
		plaintext[i] = new unsigned int[16];
		for (int j = 0; j < 16; j++)
		{
			plaintext[i][j] = 0;
		}
	}
	unsigned int** V = new unsigned int* [num + 1];
	for (int i = 0; i <= num; i++)
	{
		V[i] = new unsigned int[8];
		for (int j = 0; j < 8; j++)
		{
			V[i][j] = 0;
		}
	}
	V[0][0] = 0x7380166f;
	V[0][1] = 0x4914b2b9;
	V[0][2] = 0x172442d7;
	V[0][3] = 0xda8a0600;
	V[0][4] = 0xa96f30bc;
	V[0][5] = 0x163138aa;
	V[0][6] = 0xe38dee4d;
	V[0][7] = 0xb0fb0e4e;
	clock_t start, finish;
	start = clock();
	for (int i = 0; i < 10000000; i++)
	{
		sm3(message, plaintext, len, V);
	}
	finish = clock();
	printf("加速前时间：%d\n", finish - start);
	start = clock();
	for (int i = 0; i < 10000000; i++)
	{
		simdsm3(message, plaintext, len, V);
	}
	finish = clock();
	printf("加速后时间：%d", finish - start);
}